//recursion 

#include<iostream> //--------------> to check is string palindrome  or not
using namespace std;

bool check(int i, int j, string s){
    if(i >= j) return true;
    if(s[i]!=s[j]) return false;
    return check(i+1,j-1,s);
}
int main() {
    Takeinput();
    string s="MADAM";
    cout<<check(0,s.size()-1,s);
    
}  




///pick and nonpick in recursions

//to print subaarays.

#include <bits/stdc++.h>
using namespace std;
void subset(int i,int n,int arr[],vector<int>&ds){
    if (i==n){
        for(auto it:ds){
            cout<<it<<" ";
        }
        cout<<"\n";
        return;
    }
    //pick call
    ds.push_back(arr[i]);
    subset(i+1,n,arr,ds);
    ds.pop_back();
    //non pick call
    subset(i+1,n,arr,ds);

}
int main() {
    int arr[3]={1,2,3};
    int n=sizeof(arr)/sizeof(int); //arr.size();
    vector<int>ds; 
    subset(0,n,arr,ds);

}  


//combination sum

#include <bits/stdc++.h>
using namespace std;
void combsum(int i,int n,int arr[],vector<int>&ds,int t){
    if (i==n){
        if (t==0){
         for(auto it:ds)cout<<it<<" ";
            cout<<"\n";
        }
        return;
    }
    //pick call
    if(t>=arr[i]){
        ds.push_back(arr[i]);
        combsum(i,n,arr,ds,t-arr[i]);
        ds.pop_back();
    }
    //non pick call
    combsum(i+1,n,arr,ds,t);

}
int main() {
    int arr[]={2,3,4,6,7};
    int n=5; //arr.size();
    int t=7;
    vector<int>ds; 
    combsum(0,n,arr,ds,t);

}  


//combination sum leetcode

class Solution {
public:
void printcombinations(vector<int>&candidates,int target,vector<int>&ans,vector<vector<int>>&mainans,int ind)
    {
        if(ind==candidates.size())
        {
            if(target==0)
            {
                mainans.push_back(ans);
            }
            return;
        }
        //pick
        if(candidates[ind]<=target)
        {
            ans.push_back(candidates[ind]);
            printcombinations(candidates,target-candidates[ind],ans,mainans,ind);
            ans.pop_back();
        }
        //nopick
        printcombinations(candidates,target,ans,mainans,ind+1);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<int>ans;
        vector<vector<int>>mainans;
        printcombinations(candidates,target,ans,mainans,0);
        return mainans;
    }
};


// reverse a number using recursion

#include <iostream>
using namespace std;
}
void reverse(string n){
   if (n < 10) {
      cout<<n;
      return;
   }
   else{
      cout<<n%10;
      reverse(n/10);
   }
}
int main() {
    int n;
    cin>>n;
    reverse(n); 
}

// permutation

#include <iostream>
using namespace std;
string s="abc";
int n=s.size();
void printPermituations(string ss,int frq[]){
    if(s.size()==ss.size()){
        cout<<ss<<endl;
        return;
    }
    for(int i=0;i<n;i++){
        if(frq[i]==0){
            frq[i]=1;
            printPermituations(ss+s[i],frq);       
            frq[i]=0;
        }
    }
}
int main() {
	string ss="";
	int ans[3]={0};
	printPermituations(ss,ans);
	return 0;
}
/*abc
acb
bac
bca
cab
cba*/

//


